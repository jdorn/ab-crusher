openapi: 3.0.0
info:
  title: AB Crusher API
  version: 0.0.1
servers:
  - url: /api/v1
paths:
  /tests:
    get:
      summary: Returns a list of current and past tests
      tags:
        - Tests
      responses:
        '200':
          description: A JSON array of TestSummary objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestSummary'
                example:
                  - id: t-1
                    name: Button color test
                    status: RUNNING
                    description: Seeing if a green button performs better than a red button
                    hypothesis: A green button will draw user's attention more and cause click-through to increase
                    created_at: 2019-11-01T18:32:13Z
                    updated_at: 2019-11-02T18:32:13Z
                    started_at: 2019-11-03T18:32:13Z
                    stopped_at: 2019-11-04T18:32:13Z
                  - id: t-2
                    name: Button size test
                    status: STOPPED
                    description: Seeing if a large button performs better than a smaller button
                    hypothesis: A large button will draw a users attention more and cause click-through to increase
                    created_at: 2019-10-01T18:32:13Z
                    updated_at: 2019-10-02T18:32:13Z
                    started_at: 2019-10-03T18:32:13Z
                    stopped_at: 2019-10-04T18:32:13Z
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new Test
      tags:
        - Tests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Test'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/test/{testId}':
    get:
      summary: Return data for a single Test
      tags:
        - Tests
      parameters:
        - in: path
          name: testId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: A single Test object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a Test
      tags:
        - Tests
      parameters:
        - in: path
          name: testId
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Test'
      responses:
        '200':
          description: A single Test object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a Test
      tags:
        - Tests
      parameters:
        - in: path
          name: testId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/test/{testId}/snapshots':
    get:
      summary: Return data snapshots for a test
      tags:
        - Tests
      parameters:
        - in: path
          name: testId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: An array of data snapshots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Snapshot'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new snapshot for a test
      tags:
        - Tests
      parameters:
        - in: path
          name: testId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The snapshot created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events:
    get:
      summary: Get a list of events
      tags:
        - Events
      responses:
        '200':
          description: An array of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/event/{eventId}':
    get:
      summary: Get a single Event
      tags:
        - Events
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /metrics:
    get:
      summary: Returns a list of metrics
      tags:
        - Metrics
      responses:
        '200':
          description: A JSON array of Metric objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metric'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new Metric
      tags:
        - Metrics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metric'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metric'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/metric/{metricId}':
    get:
      summary: Return data for a single Metric
      tags:
        - Metrics
      parameters:
        - in: path
          name: metricId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: A single Metric object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metric'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a Metric
      tags:
        - Metrics
      parameters:
        - in: path
          name: metricId
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metric'
      responses:
        '200':
          description: A single Metric object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metric'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a Metric
      tags:
        - Metrics
      parameters:
        - in: path
          name: metricId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /insights:
    get:
      summary: Returns a list of insights
      tags:
        - Insights
      responses:
        '200':
          description: A JSON array of Insight objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Insight'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new Insight
      tags:
        - Insights
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Insight'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Insight'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/insight/{insightId}':
    get:
      summary: Return data for a single Insight
      tags:
        - Insights
      parameters:
        - in: path
          name: insightId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: A single Insight object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Insight'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a Insight
      tags:
        - Insights
      parameters:
        - in: path
          name: insightId
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Insight'
      responses:
        '200':
          description: A single Insight object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Insight'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a Insight
      tags:
        - Insights
      parameters:
        - in: path
          name: insightId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      type: object
      required:
        - type
        - message
      properties:
        type:
          type: string
          enum:
            - invalid_request_error
            - authentication_error
            - api_error
            - api_connection_error
            - rate_limit_error
        message:
          type: string
          example: "An unknown error occurred"
        param:
          type: string
          example: "some_param"
    Insight:
      type: object
      required:
        - id
        - testIds
        - insight
        - votes
      properties:
        id:
          type: string
          example: i_123abc
        testIds:
          type: array
          items:
            type: string
            example: t_123abc
        insight:
          type: string
          example: Green buttons get higher click throughs than Red buttons
        votes:
          type: integer
    Event:
      type: object
      required:
        - timestamp
        - user
        - event
        - objectId
      properties:
        timestamp:
          type: string
          format: date-time
        user:
          type: string
          example: u_123abc
        event:
          type: string
          example: metric.updated
        objectId:
          type: string
          example: m_123abc
        data:
          type: object
          example:
            previousProps:
              type: BINOMIAL
            newProps:
              type: COUNT
    SnapshotVariation:
      type: object
      required:
        - variation
        - samples
        - metrics
      properties:
        variation:
          type: integer
        samples:
          type: integer
          example: 800
        metrics:
          type: array
          items:
            type: object
            required:
              - id
              - value
              - enoughData
            properties:
              id:
                type: string
                example: m_123abc
              value:
                type: number
                example: 0.23
              rawData:
                type: object
              chanceToBeatBaseline:
                type: number
                minimum: 0
                maximum: 1
                example: 0.82
              enoughData:
                type: boolean
              confidenceLow:
                type: number
                example: -0.03
              confidenceHigh:
                type: number
                example: 0.12
    Snapshot:
      type: object
      required:
        - id
        - testId
        - created
        - variation
      properties:
        id:
          type: string
          example: s_123abc
        testId:
          type: string
          example: t_123abc
        created:
          type: string
          format: date-time
        variations:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotVariation'
          example:
            - variation: 0
              samples: 1802
              metrics:
                - id: m_123abc
                  value: 0.23
                  enoughData: true
            - variation: 1
              samples: 1954
              metrics:
                - id: m_123abc
                  value: 0.25
                  enoughData: true
                  chanceToBeatBaseline: 0.82
                  confidenceLow: -0.03
                  confidenceHigh: 0.16
    TestStatus:
      type: string
      enum:
        - DRAFT
        - PENDING
        - RUNNING
        - STOPPED
    Metric:
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: string
          example: m_123abc
        name:
          type: string
          example: Registered
        type:
          type: string
          enum:
            - BINOMIAL
            - COUNT
            - NPS
    Variation:
      type: object
      required:
        - variation
        - name
        - weight
        - active
        - images
      properties:
        variation:
          type: integer
        name:
          type: string
          example: Baseline
        weight:
          type: number
          minimum: 0
          maximum: 1
          example: 0.5
        active:
          type: boolean
        images:
          type: array
          items:
            type: object
            required:
              - path
              - width
              - height
            properties:
              path:
                type: string
                example: 'https://example.com/123abc.jpg'
              width:
                type: integer
                example: 800
              height:
                type: integer
                example: 600
    TestSummary:
      type: object
      required:
        - id
        - name
        - status
        - description
        - hypothesis
        - created_at
        - updated_at
        - started_at
        - stopped_at
      properties:
        id:
          type: string
          example: t_123abc
        name:
          type: string
          example: Button color test
        status:
          $ref: '#/components/schemas/TestStatus'
        description:
          type: string
          example: Seeing if a green button performs better than a red button
        hypothesis:
          type: string
          example: A green button will draw user's attention more and cause click-through to increase
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time
        stopped_at:
          type: string
          format: date-time
    Test:
      type: object
      required:
        - id
        - name
        - status
        - description
        - hypothesis
        - variations
        - metrics
        - results
        - created_at
        - updated_at
        - started_at
        - stopped_at
      properties:
        id:
          type: string
          example: t_123abc
        name:
          type: string
          example: Button color test
        status:
          $ref: '#/components/schemas/TestStatus'
        description:
          type: string
          example: Seeing if a green button performs better than a red button
        hypothesis:
          type: string
          example: A green button will draw user's attention more and cause click-through to increase
        variations:
          type: array
          items:
            $ref: '#/components/schemas/Variation'
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/Metric'
        results:
          type: object
          required:
            - summary
            - analysis
            - outcome
            - future_baseline
          properties:
            summary:
              type: string
              example: Green had a significantly higher CTR
            analysis:
              type: string
              example: 'Noticed a slight decrease in bounce rate as well, but not sure if related'
            outcome:
              type: string
              enum:
                - WIN
                - LOSS
                - DRAW
                - DNF
            future_baseline:
              type: string
              example: Switching to green going forward
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time
        stopped_at:
          type: string
          format: date-time
